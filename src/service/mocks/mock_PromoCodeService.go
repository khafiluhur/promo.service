// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tripdeals/promo.service/src/service (interfaces: PromoCodeService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	base "github.com/harryosmar/generic-gorm/base"
	entity "github.com/tripdeals/promo.service/src/entity"
)

// MockPromoCodeService is a mock of PromoCodeService interface.
type MockPromoCodeService struct {
	ctrl     *gomock.Controller
	recorder *MockPromoCodeServiceMockRecorder
}

// MockPromoCodeServiceMockRecorder is the mock recorder for MockPromoCodeService.
type MockPromoCodeServiceMockRecorder struct {
	mock *MockPromoCodeService
}

// NewMockPromoCodeService creates a new mock instance.
func NewMockPromoCodeService(ctrl *gomock.Controller) *MockPromoCodeService {
	mock := &MockPromoCodeService{ctrl: ctrl}
	mock.recorder = &MockPromoCodeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPromoCodeService) EXPECT() *MockPromoCodeServiceMockRecorder {
	return m.recorder
}

// Activate mocks base method.
func (m *MockPromoCodeService) Activate(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Activate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Activate indicates an expected call of Activate.
func (mr *MockPromoCodeServiceMockRecorder) Activate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activate", reflect.TypeOf((*MockPromoCodeService)(nil).Activate), arg0, arg1)
}

// BySlugs mocks base method.
func (m *MockPromoCodeService) BySlugs(arg0 context.Context, arg1 []string) ([]entity.PromoCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BySlugs", arg0, arg1)
	ret0, _ := ret[0].([]entity.PromoCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BySlugs indicates an expected call of BySlugs.
func (mr *MockPromoCodeServiceMockRecorder) BySlugs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BySlugs", reflect.TypeOf((*MockPromoCodeService)(nil).BySlugs), arg0, arg1)
}

// Create mocks base method.
func (m *MockPromoCodeService) Create(arg0 context.Context, arg1 *entity.PromoCode) (*entity.PromoCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*entity.PromoCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPromoCodeServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPromoCodeService)(nil).Create), arg0, arg1)
}

// Deactivate mocks base method.
func (m *MockPromoCodeService) Deactivate(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deactivate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deactivate indicates an expected call of Deactivate.
func (mr *MockPromoCodeServiceMockRecorder) Deactivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deactivate", reflect.TypeOf((*MockPromoCodeService)(nil).Deactivate), arg0, arg1)
}

// Detail mocks base method.
func (m *MockPromoCodeService) Detail(arg0 context.Context, arg1 int64) (*entity.PromoCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detail", arg0, arg1)
	ret0, _ := ret[0].(*entity.PromoCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Detail indicates an expected call of Detail.
func (mr *MockPromoCodeServiceMockRecorder) Detail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detail", reflect.TypeOf((*MockPromoCodeService)(nil).Detail), arg0, arg1)
}

// List mocks base method.
func (m *MockPromoCodeService) List(arg0 context.Context, arg1, arg2 int, arg3 []base.OrderBy, arg4 []base.Where) ([]entity.PromoCode, *base.Paginator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]entity.PromoCode)
	ret1, _ := ret[1].(*base.Paginator)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockPromoCodeServiceMockRecorder) List(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPromoCodeService)(nil).List), arg0, arg1, arg2, arg3, arg4)
}

// Update mocks base method.
func (m *MockPromoCodeService) Update(arg0 context.Context, arg1 *entity.PromoCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPromoCodeServiceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPromoCodeService)(nil).Update), arg0, arg1)
}
